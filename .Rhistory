scale_features(rlm_scaling = F)
library(qSIPmg)
library(qSIPmg)
library(qSIPmg)
library(qSIPmg)
library(qSIPmg)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE)
#Load required libraries
library(tidyverse)
library(phyloseq)
library(HTSSIP)
library(data.table)
library(ggpubr)
library(qSIPmg)
## Load data
#Coverage metadata
#Uncomment if your coverage data is in the format mentioned above for this file. Remains commented if you are using the output from `checkm coverage`
f_tibble = read_csv(file="mock_input_data/coverage_metadata.csv")
#Sequins metadata
sequins <- read_csv(file="mock_input_data/sequins_metadata.csv")
#Dilutions data
seq_dil = read_csv(file = "mock_input_data/dilutions_data.csv")
#Log scale BOOLEAN. True or False depending on how you would want the MAG coverages to be scaled. Select TRUE if you need MAG concentrations scaled on the log scale
log_scale = TRUE
#coe_of_variation. Acceptable coefficient of variation for coverage and detection (eg. 20 - for 20 % threshold of coefficient of variation) (Coverages above the threshold value will be flagged in the plots)
coe_of_variation = 20
#Taxonomy
gtdbtk_bac_summary = read_delim("mock_input_data/gtdbtk.bac120.summary.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
gtdbtk_archaea = read_delim("mock_input_data/gtdbtk.ar122.summary.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
#GC content
GC_content <- read_csv(file = "mock_input_data/GC_content.csv")
#Fractions
fractions_ps = read_csv("mock_input_data/fractions.csv")
##Optional
#Bin data
#Use this line if you are using coverage data from `checkm coverage` program's output. Otherwise ensure your data is in the format specified for this pipeline and comment this next line
#bin_tibble = read_delim("mock_input_data/checkm_coverage.tsv", "\t", escape_double = FALSE, trim_ws = TRUE)
#Operator
#operator = "mean"
scale_features(rlm_scaling = F, f_tibble = f_tibble, sequin_meta = sequins, seq_dilution = seq_dil, log_trans = T, coe_of_variation = 20, cook_filtering = T)
scale_features(rlm_scaling = F, f_tibble = f_tibble, sequin_meta = sequins, seq_dilution = seq_dil, log_trans = T, coe_of_variation = 20, cook_filtering == TRUE)
cook_filtering = TRUE
cook_filtering
scale_features(rlm_scaling = F, f_tibble = f_tibble, sequin_meta = sequins, seq_dilution = seq_dil, log_trans = T, coe_of_variation = 20, cook_filtering = TRUE)
colnames(scale_fac)
if(cook_filtering == "TRUE") {
scale_fac = scale_fac %>%
dplyr::mutate(cooksd = purrr::map(fit, ~ stats::cooks.distance(.)), #calculate Cooks distance
influential_data = purrr::map(cooksd, ~as.numeric(names(.)[(. > (4/length(.)))])), #Identify row IDs which have data points higher than Cooks threshold
cooksd_plot = purrr::map(cooksd, ~ ggplot2::ggplot(as_tibble(.), aes(y = value, x = seq(1, length(.)))) +
geom_point() + geom_hline(yintercept = 4/length(.)) +
ggtitle("Cooks distance - \n horizontal line is 4/n (n is the # of data)") +
xlab("#") + ylab("cooks distance")), #Plot Cooks distance
seq_cov_filt_temp = purrr::map2(seq_cov_filt, influential_data, ~dplyr::slice(.x,-.y)) #Retain only those points passing Cooks distance threshold
)  %>%
mutate(
seq_cov_filt_temp_grouped = purrr::map(seq_cov_filt_temp, ~ dplyr::group_by(., Concentration) %>%
dplyr::summarise(mean_cov = mean(Coverage),
sd_cov = stats::sd(Coverage)) %>%
dplyr::na_if(0) %>%
dplyr::mutate(coe_var = sd_cov*100/mean_cov) %>%
dplyr::mutate(threshold_detection = coe_var <= coe_of_variation) %>%
drop_na()), #Calculate mean, standard deviation, and coefficient of variation of samples grouped by Concentration
seq_cov_filt_round2 = purrr::map2(seq_cov_filt_temp, seq_cov_filt_temp_grouped, ~ dplyr::select(.x, -mean_cov, -sd_cov, -coe_var, -threshold_detection) %>%
dplyr::inner_join(., .y, by = "Concentration")),
seq_cov_filt_round2 = purrr::map(seq_cov_filt_round2, ~ dplyr::filter(., Concentration > 0)), #Retain data which have Concentration more than zero
seq_cov_filt_round2 = purrr::map(seq_cov_filt_round2, ~ dplyr::filter(., Coverage > 0)), #Retain data which have Coverage more than zero
seq_cov_filt_round2 = purrr::map(seq_cov_filt_round2, ~ drop_na(.)), #Drop any NAs in the data
outliers = purrr::map2(seq_cov_filt_temp, seq_cov_filt_temp_grouped, ~ dplyr::select(.x, -mean_cov, -sd_cov, -coe_var, -threshold_detection) %>%
dplyr::anti_join(., .y, by = "Concentration")), #List outliers in the data
zero_row_check = purrr::map(seq_cov_filt_round2, ~nrow(.)) # For linear regression, check if any samples have zero data points or only one data point. This precludes linear regression analysis
) %>%
dplyr::filter(zero_row_check > 0) %>% #Filter samples which have one or zero data points in the seq_cov_filt_round2 tibble
dplyr::mutate(
fit_filtered_lm = ifelse(log_scale == "TRUE" , # check log_trans input
purrr::map(seq_cov_filt_round2, ~ lm(log10(Concentration) ~ log10(Coverage) , data = .)), #log lm if true
purrr::map(seq_cov_filt_round2, ~ lm((Concentration) ~ (Coverage) , data =.)) # lm if false
),
slope_filtered = purrr::map_dbl(fit_filtered_lm, ~ summary(.)$coef[2]), # get slope
intercept_filtered = purrr::map_dbl(fit_filtered_lm, ~summary(.)$coef[1])
) %>%
dplyr::filter(slope_filtered > 0) %>%
dplyr::mutate(
cooksd_filtered = purrr::map(fit_filtered_lm, ~ stats::cooks.distance(.)), #Recalculate Cooks distance to validate if the pipeline to filter out outliers worked
cooksd_plot_filtered = purrr::map(cooksd_filtered, ~ ggplot2::ggplot(as_tibble(.), aes(y = value, x = seq(1, length(.)))) +
geom_point() + geom_hline(yintercept = 4/length(.)) +
ggtitle("Cooks distance - \n horizontal line is 4/n (n is the # of data)") + xlab("#") + ylab("cooks distance"))
) %>%
dplyr::mutate(
seq_cov_filt_round2 = purrr::map2(seq_cov_filt_round2, slope_filtered,
~dplyr::mutate(.x, slope = .y)),
seq_cov_filt_round2 = purrr::map2(seq_cov_filt_round2, intercept_filtered,
~dplyr::mutate(.x, intercept = .y))
) %>%
#Plot lm based graphs to show r squared on the graph
dplyr::mutate(
plots_filtered_lm = ifelse(log_scale == "TRUE" , # check log_trans input
purrr::map(seq_cov_filt_round2, # log-scaled plot if true
~ ggplot2::ggplot(data=. , aes(x=log10(Coverage), y= log10(Concentration))) +
geom_point(aes(shape = threshold_detection)) +
geom_smooth(method = "lm") +
ggpubr::stat_regline_equation(label.x= -0.1, label.y = 3) +
ggpubr::stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")), label.x = -0.1, label.y = 3.5) +
xlab("Coverage (log[read depth])") +
ylab("DNA Concentration (log[attamoles/uL])") +
scale_shape(name = "Coefficient of variation", labels = c(paste("below the threshold (",coe_of_variation,")"), paste("above the threshold(",coe_of_variation,")"))) +
theme_bw()
),
purrr::map(seq_cov_filt_round2, # non-scaled plot if true
~ ggplot2::ggplot(data=. , aes(x=Coverage, y= Concentration)) +
geom_point(aes(shape = threshold_detection)) +
geom_smooth(method = "lm") +
ggpubr::stat_regline_equation(label.x= 0, label.y = 1000) +
ggpubr::stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")), label.x = 0, label.y = 100000) +
xlab("Coverage (read depth)") +
ylab("DNA Concentration (attamoles/uL)") +
scale_shape(name = "Coefficient of variation", labels = c(paste("below the threshold (",coe_of_variation,")"), paste("above the threshold(",coe_of_variation,")"))) +
theme_bw()
)
)) %>%
dplyr::mutate(
# Scale MAGs based on robust linear regression
mag_ab_filtered = ifelse(log_scale == "TRUE" , # check log_trans input
purrr::map2(mag_cov, slope_filtered, ~ mutate(.x, Concentration = log10(Coverage) * .y)), # y = mx (in log scale) if true
purrr::map2(mag_cov, slope_filtered, ~ mutate(.x, Concentration = Coverage * .y)) # y = mx if false
),
mag_ab_filtered = purrr::map2(mag_ab_filtered, intercept_filtered, ~ dplyr::mutate(.x, Concentration = Concentration + .y)),
mag_ab_filtered = ifelse(log_scale == "TRUE" , # check log_trans input
purrr::map(mag_ab_filtered, ~ dplyr::mutate(.x, Concentration = 10^Concentration)), #convert back from log10 if true
mag_ab_filtered), # no change if false
mag_det_filtered = mag_ab_filtered,
mag_ab_filtered = purrr::map(mag_ab_filtered, ~ dplyr::select(., Feature, Concentration)), # drop Coverage column
mag_ab_filtered = purrr::map2(mag_ab_filtered, Sample, ~ stats::setNames(.x, c("Feature", .y))), #put sample name in MAG table
# Remove MAGs below LOD
#mag_det = mag_ab,
#mag_det = map2(mag_det, Sample, ~ setNames(.x, .y, 'Concentration')), #get sample name out of header for filter
mag_det_filtered = purrr::map2(mag_det_filtered, lod, ~ dplyr::filter(.x, Concentration > .y)),
mag_det_filtered = purrr::map(mag_det_filtered, ~ dplyr::select(.x, Feature, Concentration)),
mag_det_filtered = purrr::map2(mag_det_filtered, Sample, ~ stats::setNames(.x, c("Feature", .y))))  #change header back to sample
}
colnames(scale_fac)
scale_features_lm(f_tibble = f_tibble, sequin_meta = sequins, seq_dilution = seq_dil, log_trans = T, coe_of_variation = 20, cook_filtering = TRUE)
library(qSIPmg)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE)
#Load required libraries
library(tidyverse)
library(phyloseq)
library(HTSSIP)
library(data.table)
library(ggpubr)
library(qSIPmg)
## Load data
#Coverage metadata
#Uncomment if your coverage data is in the format mentioned above for this file. Remains commented if you are using the output from `checkm coverage`
f_tibble = read_csv(file="mock_input_data/coverage_metadata.csv")
#Sequins metadata
sequins <- read_csv(file="mock_input_data/sequins_metadata.csv")
#Dilutions data
seq_dil = read_csv(file = "mock_input_data/dilutions_data.csv")
#Log scale BOOLEAN. True or False depending on how you would want the MAG coverages to be scaled. Select TRUE if you need MAG concentrations scaled on the log scale
log_scale = TRUE
#coe_of_variation. Acceptable coefficient of variation for coverage and detection (eg. 20 - for 20 % threshold of coefficient of variation) (Coverages above the threshold value will be flagged in the plots)
coe_of_variation = 20
#Taxonomy
gtdbtk_bac_summary = read_delim("mock_input_data/gtdbtk.bac120.summary.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
gtdbtk_archaea = read_delim("mock_input_data/gtdbtk.ar122.summary.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
#GC content
GC_content <- read_csv(file = "mock_input_data/GC_content.csv")
#Fractions
fractions_ps = read_csv("mock_input_data/fractions.csv")
##Optional
#Bin data
#Use this line if you are using coverage data from `checkm coverage` program's output. Otherwise ensure your data is in the format specified for this pipeline and comment this next line
#bin_tibble = read_delim("mock_input_data/checkm_coverage.tsv", "\t", escape_double = FALSE, trim_ws = TRUE)
#Operator
#operator = "mean"
scale_features(rlm_scaling = F, f_tibble = f_tibble, sequin_meta = sequins, seq_dilution = seq_dil, log_trans = T, coe_of_variation = 20, cook_filtering = T)
?HTSSIP::delta_BD()
knitr::opts_chunk$set(echo = FALSE, warning = FALSE)
#Load required libraries
library(tidyverse)
library(phyloseq)
library(HTSSIP)
library(data.table)
library(ggpubr)
library(qSIPmg)
## Load data
#Coverage metadata
#Uncomment if your coverage data is in the format mentioned above for this file. Remains commented if you are using the output from `checkm coverage`
f_tibble = read_csv(file="mock_input_data/coverage_metadata.csv")
#Sequins metadata
sequins <- read_csv(file="mock_input_data/sequins_metadata.csv")
#Dilutions data
seq_dil = read_csv(file = "mock_input_data/dilutions_data.csv")
#Log scale BOOLEAN. True or False depending on how you would want the MAG coverages to be scaled. Select TRUE if you need MAG concentrations scaled on the log scale
log_scale = TRUE
#coe_of_variation. Acceptable coefficient of variation for coverage and detection (eg. 20 - for 20 % threshold of coefficient of variation) (Coverages above the threshold value will be flagged in the plots)
coe_of_variation = 20
#Taxonomy
gtdbtk_bac_summary = read_delim("mock_input_data/gtdbtk.bac120.summary.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
gtdbtk_archaea = read_delim("mock_input_data/gtdbtk.ar122.summary.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
#GC content
GC_content <- read_csv(file = "mock_input_data/GC_content.csv")
#Fractions
fractions_ps = read_csv("mock_input_data/fractions.csv")
taxonomy_ps = rbind(gtdbtk_bac_summary, gtdbtk_archaea) #Combine bacteria and archaea taxonomy files if necessary
#Scale MAG coverages to obtain MAG absolute concentrations and save scaling plots in the working directory
mag_tab_scaled <- scale_features_ps(f_tibble, sequins, seq_dil, log_scale, coe_of_variation)
#Scale MAG coverages to obtain MAG absolute concentrations and save scaling plots in the working directory
mag_tab_scaled <- scale_features_lm(f_tibble, sequins, seq_dil, log_scale, coe_of_variation)
#Scale MAG coverages to obtain MAG absolute concentrations and save scaling plots in the working directory
mag_tab_scaled <- scale_features_lm(f_tibble, sequins, seq_dil, log_scale, coe_of_variation, cook_filtering = T)
View(mag_tab_scaled)
View(scale_fac)
View(scale_fac[[7]][[1]])
scale_fac_small =scale_fac[1:2]
View(scale_fac_small)
scale_fac_small = scale_fac[2,]
scale_fac_small = scale_fac[3,]
View(scale_fac_small)
scale_fac_small = scale_fac[1:2,]
View(scale_fac_small)
View(scale_fac_small[[11]][[1]])
taxonomy.object = tax.table(taxonomy_ps) # Create a taxonomy phyloseq object
samples.object = sample.table(fractions_ps) # Create a samples phyloseq object
phylo.qSIP = phylo.table(mag.table, taxonomy.object, samples.object) # Make a phyloseq table for downstream qSIP analysis
#mag_tab = as.matrix(mag_tab) #Ensuring input for phyloseq OTU table is in a matrix format
mag.table = phyloseq::otu_table(mag_tab, taxa_are_rows = TRUE) #Phyloseq OTU table
phylo.qSIP = phylo.table(mag.table, taxonomy.object, samples.object) # Make a phyloseq table for downstream qSIP analysis
knitr::opts_chunk$set(echo = FALSE, warning = FALSE)
#Load required libraries
library(tidyverse)
library(phyloseq)
library(HTSSIP)
library(data.table)
library(ggpubr)
library(qSIPmg)
## Load data
#Coverage metadata
#Uncomment if your coverage data is in the format mentioned above for this file. Remains commented if you are using the output from `checkm coverage`
f_tibble = read_csv(file="mock_input_data/coverage_metadata.csv")
#Sequins metadata
sequins <- read_csv(file="mock_input_data/sequins_metadata.csv")
#Dilutions data
seq_dil = read_csv(file = "mock_input_data/dilutions_data.csv")
#Log scale BOOLEAN. True or False depending on how you would want the MAG coverages to be scaled. Select TRUE if you need MAG concentrations scaled on the log scale
log_scale = TRUE
#coe_of_variation. Acceptable coefficient of variation for coverage and detection (eg. 20 - for 20 % threshold of coefficient of variation) (Coverages above the threshold value will be flagged in the plots)
coe_of_variation = 20
#Taxonomy
gtdbtk_bac_summary = read_delim("mock_input_data/gtdbtk.bac120.summary.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
gtdbtk_archaea = read_delim("mock_input_data/gtdbtk.ar122.summary.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
#GC content
GC_content <- read_csv(file = "mock_input_data/GC_content.csv")
#Fractions
fractions_ps = read_csv("mock_input_data/fractions.csv")
##Optional
#Bin data
#Use this line if you are using coverage data from `checkm coverage` program's output. Otherwise ensure your data is in the format specified for this pipeline and comment this next line
#bin_tibble = read_delim("mock_input_data/checkm_coverage.tsv", "\t", escape_double = FALSE, trim_ws = TRUE)
#Operator
#operator = "mean"
#Scale MAG coverages to obtain MAG absolute concentrations and save scaling plots in the working directory
mag_tab_scaled <- scale_features_ps(f_tibble, sequins, seq_dil, log_scale, coe_of_variation)
#Scale MAG coverages to obtain MAG absolute concentrations and save scaling plots in the working directory
mag_tab_scaled <- scale_features_rlm(f_tibble, sequins, seq_dil, log_scale, coe_of_variation)
View(scale_fac)
View(scale_fac$seq_cov_filt[[1]])
a = scale_fac$seq_cov_filt[[1]]
ggplot(a, aes(Coverage, Concentration)) + geom_point()
ggplot(a, aes(Coverage, Concentration)) + geom_point(aes(fill = Feature))
ggplot(a, aes(Coverage, Concentration)) + geom_point(aes(color = Feature))
b = a %>% filter(Feature == "GC_68_3")
ggplot(b, aes(Coverage, Concentration)) + geom_point(aes(color = Feature))
ggplot(a, aes(Coverage, Concentration)) + geom_point(aes(color = Concentration))
ggplot(a, aes(Coverage, Concentration)) + geom_point(aes(fill = Concentration))
install.packages(parallel)
parallel::detectCores()
knitr::opts_chunk$set(echo = FALSE, warning = FALSE)
#Load required libraries
library(tidyverse)
library(phyloseq)
library(HTSSIP)
library(data.table)
library(ggpubr)
library(qSIPmg)
## Load data
#Coverage metadata
#Uncomment if your coverage data is in the format mentioned above for this file. Remains commented if you are using the output from `checkm coverage`
f_tibble = read_csv(file="mock_input_data/coverage_metadata.csv")
#Sequins metadata
sequins <- read_csv(file="mock_input_data/sequins_metadata.csv")
#Dilutions data
seq_dil = read_csv(file = "mock_input_data/dilutions_data.csv")
#Log scale BOOLEAN. True or False depending on how you would want the MAG coverages to be scaled. Select TRUE if you need MAG concentrations scaled on the log scale
log_scale = TRUE
#coe_of_variation. Acceptable coefficient of variation for coverage and detection (eg. 20 - for 20 % threshold of coefficient of variation) (Coverages above the threshold value will be flagged in the plots)
coe_of_variation = 20
#Taxonomy
gtdbtk_bac_summary = read_delim("mock_input_data/gtdbtk.bac120.summary.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
gtdbtk_archaea = read_delim("mock_input_data/gtdbtk.ar122.summary.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
#GC content
GC_content <- read_csv(file = "mock_input_data/GC_content.csv")
#Fractions
fractions_ps = read_csv("mock_input_data/fractions.csv")
##Optional
#Bin data
#Use this line if you are using coverage data from `checkm coverage` program's output. Otherwise ensure your data is in the format specified for this pipeline and comment this next line
#bin_tibble = read_delim("mock_input_data/checkm_coverage.tsv", "\t", escape_double = FALSE, trim_ws = TRUE)
#Operator
#operator = "mean"
taxonomy_ps = rbind(gtdbtk_bac_summary, gtdbtk_archaea) #Combine bacteria and archaea taxonomy files if necessary
#mag_tab is a tibble with absolute concentrations of MAGs obtained by scaling MAG coverages using linear regression models on sequin coverages and concentration
#Optional coverage pooling and statistics
#Comment if your coverage data (f_tibble) is in the format specified for this pipeline. Use this line if you are using the coverage file from `checkm coverage` program's output
#f_tibble = pool_bin_stat(bin_tibble)
#Save the output file
#write.csv(f_tibble, "pool_bin_stat.csv", row.names = F)
#Scale MAG coverages to obtain MAG absolute concentrations and save scaling plots in the working directory
mag_tab_scaled <- scale_features_ps(f_tibble, sequins, seq_dil, log_scale, coe_of_variation)
#Scale MAG coverages to obtain MAG absolute concentrations and save scaling plots in the working directory
mag_tab_scaled <- scale_features_rlm(f_tibble, sequins, seq_dil, log_scale, coe_of_variation)
mag_tab = as.matrix(mag_tab_scaled$mag_tab) #Extract absolute abundances as a matrix
#mag_tab = as.matrix(mag_tab) #Ensuring input for phyloseq OTU table is in a matrix format
mag.table = phyloseq::otu_table(mag_tab, taxa_are_rows = TRUE) #Phyloseq OTU table
taxonomy.object = tax.table(taxonomy_ps) # Create a taxonomy phyloseq object
samples.object = sample.table(fractions_ps) # Create a samples phyloseq object
phylo.qSIP = phylo.table(mag.table, taxonomy.object, samples.object) # Make a phyloseq table for downstream qSIP analysis
atomX = qSIP_atom_excess_MAGs(phylo.qSIP,
control_expr='Isotope=="12C"',
treatment_rep='Replicate',
Gi = GC_content)
#Bootstrap confidence intervals
df_atomX_boot = qSIP_bootstrap_MAGs(atomX, n_boot=100)
View(atomX$A)
?qSIP_bootstrap()
#Bootstrap confidence intervals
df_atomX_boot = qSIP_bootstrap(atomX, n_boot=100, )
devtools::install_github("olafmersmann/microbenchmarkCore")
devtools::install_github("olafmersmann/microbenchmark")
library(microbenchmarkCore)
benchmark_speeds = microbenchmark("no parallel" = {df_atomX_boot = qSIP_bootstrap(atomX, n_boot=100)}, )
benchmark_speeds = microbenchmark("no parallel" = {df_atomX_boot = qSIP_bootstrap(atomX, n_boot=100)}, "parallel" = {df_atomX_boot = qSIP_bootstrap(atomX, n_boot=100, parallel = TRUE)})
no_parallel_time = system.time({qSIP_bootstrap(atomX, n_boot=1000, parallel = FALSE)})
no_parallel_time
parallel_time = system.time({qSIP_bootstrap(atomX, n_boot=1000, parallel = TRUE)})
parallel_time
parallel_time = system.time({qSIP_bootstrap(atomX, n_boot=1000, parallel = TRUE)})
no_parallel_time = system.time({qSIP_bootstrap(atomX, n_boot=1000, parallel = FALSE)})
parallel_time
no_parallel_time
dplyr::mdply()
dplyr::mdply()
?mdply()
parallel::detectCores()
qSIP_bootstrap_MAGs(atomX, n_boot=10)
View(df_atomX_boot)
system.time({qSIP_bootstrap(atomX, n_boot=10000, parallel = FALSE)})
system.time({qSIP_bootstrap(atomX, n_boot=10000, parallel = TRUE)})
knitr::opts_chunk$set(echo = FALSE, warning = FALSE)
#Load required libraries
library(tidyverse)
library(phyloseq)
library(HTSSIP)
library(data.table)
library(ggpubr)
library(qSIPmg)
## Load data
#Coverage metadata
#Uncomment if your coverage data is in the format mentioned above for this file. Remains commented if you are using the output from `checkm coverage`
f_tibble = read_csv(file="mock_input_data/coverage_metadata.csv")
#Sequins metadata
sequins <- read_csv(file="mock_input_data/sequins_metadata.csv")
#Dilutions data
seq_dil = read_csv(file = "mock_input_data/dilutions_data.csv")
#Log scale BOOLEAN. True or False depending on how you would want the MAG coverages to be scaled. Select TRUE if you need MAG concentrations scaled on the log scale
log_scale = TRUE
#coe_of_variation. Acceptable coefficient of variation for coverage and detection (eg. 20 - for 20 % threshold of coefficient of variation) (Coverages above the threshold value will be flagged in the plots)
coe_of_variation = 20
#Taxonomy
gtdbtk_bac_summary = read_delim("mock_input_data/gtdbtk.bac120.summary.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
gtdbtk_archaea = read_delim("mock_input_data/gtdbtk.ar122.summary.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
#GC content
GC_content <- read_csv(file = "mock_input_data/GC_content.csv")
#Fractions
fractions_ps = read_csv("mock_input_data/fractions.csv")
##Optional
#Bin data
#Use this line if you are using coverage data from `checkm coverage` program's output. Otherwise ensure your data is in the format specified for this pipeline and comment this next line
#bin_tibble = read_delim("mock_input_data/checkm_coverage.tsv", "\t", escape_double = FALSE, trim_ws = TRUE)
#Operator
#operator = "mean"
taxonomy_ps = rbind(gtdbtk_bac_summary, gtdbtk_archaea) #Combine bacteria and archaea taxonomy files if necessary
#mag_tab is a tibble with absolute concentrations of MAGs obtained by scaling MAG coverages using linear regression models on sequin coverages and concentration
#Optional coverage pooling and statistics
#Comment if your coverage data (f_tibble) is in the format specified for this pipeline. Use this line if you are using the coverage file from `checkm coverage` program's output
#f_tibble = pool_bin_stat(bin_tibble)
#Save the output file
#write.csv(f_tibble, "pool_bin_stat.csv", row.names = F)
#Scale MAG coverages to obtain MAG absolute concentrations and save scaling plots in the working directory
mag_tab_scaled <- scale_features_ps(f_tibble, sequins, seq_dil, log_scale, coe_of_variation)
#Scale MAG coverages to obtain MAG absolute concentrations and save scaling plots in the working directory
mag_tab_scaled <- scale_features(rlm_scaling = T, f_tibble, sequins, seq_dil, log_scale, coe_of_variation)
#Scale MAG coverages to obtain MAG absolute concentrations and save scaling plots in the working directory
mag_tab_scaled <- scale_features(rlm_scaling = T, f_tibble, sequins, seq_dil, log_scale, coe_of_variation)
mag_tab = as.matrix(mag_tab_scaled$mag_tab) #Extract absolute abundances as a matrix
mag_tab = as.matrix(mag_tab_scaled$mag_tab) #Extract absolute abundances as a matrix
mag_tab
#mag_tab = as.matrix(mag_tab) #Ensuring input for phyloseq OTU table is in a matrix format
mag.table = phyloseq::otu_table(mag_tab, taxa_are_rows = TRUE) #Phyloseq OTU table
taxonomy.object = tax.table(taxonomy_ps) # Create a taxonomy phyloseq object
samples.object = sample.table(fractions_ps) # Create a samples phyloseq object
phylo.qSIP = phylo.table(mag.table, taxonomy.object, samples.object) # Make a phyloseq table for downstream qSIP analysis
atomX = qSIP_atom_excess_MAGs(phylo.qSIP,
control_expr='Isotope=="12C"',
treatment_rep='Replicate',
Gi = GC_content)
View(atomX$A)
system.time({qSIP_bootstrap(atomX, n_boot=10000, parallel = FALSE)})
set.seed(123)
system.time({qSIP_bootstrap(atomX, n_boot=10000, parallel = FALSE)})
system.time({qSIP_bootstrap(atomX, n_boot=10000, parallel = TRUE)})
library(qSIPmg)
library(qSIPmg)
library(qSIPmg)
a_2 = c(1,2,3,4,5)
quantile(a_2, 0.5)
quantile(a_2, 0.05)
rm(a_2)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
#Load required libraries
library(tidyverse)
library(phyloseq)
library(phyloseq)
library(HTSSIP)
library(data.table)
library(ggpubr)
library(qSIPmg)
set.seed(seed = 1000)
## Load data
#Coverage metadata
#Uncomment if your coverage data is in the format mentioned above for this file. Remains commented if you are using the output from `checkm coverage`
f_tibble <- read_csv("mock_input_data/coverage_metadata.csv")
#Sequins metadata
sequins <- read_csv(file="mock_input_data/sequins_metadata.csv")
#Dilutions data
seq_dil = read_csv(file = "mock_input_data/dilutions_data.csv")
#Log scale BOOLEAN. True or False depending on how you would want the MAG coverages to be scaled. Select TRUE if you need MAG concentrations scaled on the log scale
log_scale = TRUE
#coe_of_variation. Acceptable coefficient of variation for coverage and detection (eg. 20 - for 20 % threshold of coefficient of variation) (Coverages above the threshold value will be flagged in the plots)
coe_of_variation = 20
#Taxonomy
gtdbtk_bac_summary = read_delim("mock_input_data/gtdbtk.bac120.summary.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
gtdbtk_archaea = read_delim("mock_input_data/gtdbtk.ar122.summary.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
#GC content
GC_content <- read_csv(file = "mock_input_data/GC_content.csv")
#Fractions
fractions = read_csv("mock_input_data/fractions.csv")
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
mag_tab_scaled_rlm <- scale_features_rlm(f_tibble, sequins, seq_dil, log_scale, coe_of_variation = coe_of_variation)
mag_tab_scaled_lm <- scale_features_lm(f_tibble, sequins, seq_dil, log_scale, coe_of_variation = coe_of_variation)
mag_tab_scaled_lm <- scale_features_lm(f_tibble, sequins, seq_dil, log_scale, coe_of_variation = coe_of_variation, cook_filtering = FALSE)
mag_tab_scaled_lm <- scale_features_lm(f_tibble, sequins, seq_dil, log_scale, coe_of_variation = coe_of_variation, cook_filtering = TRUE)
##Load data
#Coverage data
f_tibble <- read_csv("mock_input_data/coverages_outliers.csv")
#Sequins metadata
sequins <- read_csv(file="mock_input_data/sequin_meta_outliers.csv")
#Dilutions data
seq_dil = read_csv(file = "mock_input_data/seq_dilution_outliers.csv")
#Log scale BOOLEAN. True or False depending on how you would want the MAG coverages to be scaled. Select TRUE if you need MAG concentrations scaled on the log scale
log_scale = TRUE
#coe_of_variation. Acceptable coefficient of variation for coverage and detection (eg. 20 - for 20 % threshold of coefficient of variation) (Coverages above the threshold value will be flagged in the plots)
coe_of_variation = 500
mag_tab_scaled_rlm <- scale_features_rlm(f_tibble, sequins, seq_dil, log_scale, coe_of_variation = coe_of_variation)
mag_tab_scaled_lm <- scale_features_lm(f_tibble, sequins, seq_dil, log_scale, coe_of_variation = coe_of_variation, cook_filtering = TRUE)
mag_tab_scaled_rlm$scale_fac
a = mag_tab_scaled_rlm$scale_fac
VIew(a)
View(a)
a = mag_tab_scaled_lm$scale_fac
#coe_of_variation. Acceptable coefficient of variation for coverage and detection (eg. 20 - for 20 % threshold of coefficient of variation) (Coverages above the threshold value will be flagged in the plots)
coe_of_variation = 50
mag_tab_scaled_rlm <- scale_features_rlm(f_tibble, sequins, seq_dil, log_scale, coe_of_variation = coe_of_variation)
mag_tab_scaled_rlm <- scale_features_rlm(f_tibble, sequins, seq_dil, log_scale, coe_of_variation = coe_of_variation)
mag_tab_scaled_lm <- scale_features_lm(f_tibble, sequins, seq_dil, log_scale, coe_of_variation = coe_of_variation, cook_filtering = TRUE)
#coe_of_variation. Acceptable coefficient of variation for coverage and detection (eg. 20 - for 20 % threshold of coefficient of variation) (Coverages above the threshold value will be flagged in the plots)
coe_of_variation = 500
mag_tab_scaled_rlm$scale_fac$plots[[1]]
mag_tab_scaled_rlm <- scale_features_rlm(f_tibble, sequins, seq_dil, log_scale, coe_of_variation = coe_of_variation)
mag_tab_scaled_lm <- scale_features_lm(f_tibble, sequins, seq_dil, log_scale, coe_of_variation = coe_of_variation, cook_filtering = TRUE)
mag_tab_scaled_rlm$scale_fac$plots[[1]]
mag_tab_scaled_lm$scale_fac$plots[[1]]
rlm_example = png::readPNG(rlm-example.png)
rlm_example = png::readPNG("rlm-example.png")
rlm_example
a$plots_filtered_lm[[1]]
library(qSIPmg)
